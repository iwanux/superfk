{"version":3,"sources":["assets/images/f68217cb8d16716e729b3fe2c8d2b425.jpg","assets/images/GettyImages-694542042-e1586274805503.jpg","logo.svg","screen2OBJ.js","section/screen1/component/screenTitle.component.jsx","section/screen1/screen1.section.jsx","section/screen2/screen2.section.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Screen2OBJ","ScreenTitle","useEffect","gsap","registerPlugin","ScrollTrigger","to","scrollTrigger","trigger","toggleActions","scrub","y","duration","backgroundSize","autoRound","className","Screen1","props","firstScreenSec","style","Screen2","id","tl","timeline","SectionElement","document","getElementById","LeftDesc","children","start","end","markers","opacity","left","scrollLeftDesc","upperTitle","lowerTitle","map","item","index","key","screenBackgroundStyle","backgroundImage","FirstBG","FirstSec","App","title","useState","screenObj","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,8D,gBCA3CD,EAAOC,QAAU,IAA0B,kE,wECA3CD,EAAOC,QAAU,IAA0B,kC,yGCW5BC,G,YAXI,CAAC,CAAC,KAAQ,CACzB,WAAa,iBACb,WAAa,CAAC,uBAAuB,oBAAoB,yBAAyB,gBAAgB,2BAA2B,mBAAmB,qBAAqB,2CAEzK,CAAC,KAAQ,CACL,WAAa,iBACb,WAAa,CAAC,mBAAmB,mBAAmB,6BAA6B,oBAAoB,4BAA4B,wBAAwB,yBAAyB,gC,8CC2BvKC,EA7BK,WAsBhB,OArBAC,qBAAU,WACNC,IAAKC,eAAeC,KACpBF,IAAKG,GAAG,eAAgB,CACpBC,cAAc,CACVC,QAAQ,WACRC,cAAc,yBACdC,OAAM,GAEVC,EAAE,IACFC,SAAS,IAEbT,IAAKG,GAAG,WAAY,CAChBC,cAAc,CACVC,QAAQ,WACRC,cAAc,yBACdC,OAAM,GAEVG,eAAe,OACfC,WAAU,OAId,yBAAKC,UAAU,eACf,mDCfOC,EATC,SAACC,GAAS,IACfC,EAAkBD,EAAlBC,eACP,OACI,yBAAKH,UAAU,UAAUI,MAAOD,GAChC,kBAAC,EAAD,QCgDOE,EAlBC,SAACH,GACbf,qBAAU,YAlCS,SAAC,GAAQ,IAAPmB,EAAM,EAANA,GACrBlB,IAAKC,eAAeC,KACpB,IAAMiB,EAAKnB,IAAKoB,WACVC,EAAiBC,SAASC,eAAeL,GACzCM,EAAWH,EAAeI,SAAS,GAEzCN,EAAGhB,GAAGqB,EAAU,CACZpB,cAAc,CACVC,QAAQgB,EACRf,cAAc,yBACdoB,MAAM,WACNC,IAAI,WACJpB,OAAM,EACNqB,SAAQ,GAEZC,QAAQ,EACRC,KAAK,KACLrB,SAAS,IACVN,GAAGqB,EAAU,CACZpB,cAAc,CACVC,QAAQgB,EACRf,cAAc,yBACdoB,MAAM,WACNC,IAAI,WACJpB,OAAM,EACNqB,SAAQ,GAEZC,QAAQ,EACRC,KAAK,OACLrB,SAAS,IAMTsB,CAAejB,MAFE,IAIdkB,EAA0BlB,EAA1BkB,WAAYC,EAAcnB,EAAdmB,WACf,OACI,yBAAKrB,UAAU,kBAAkBM,GAAIJ,EAAMI,IACvC,yBAAKN,UAAU,YACf,4BAAKoB,GACD,4BACKC,EAAWC,KAAI,SAACC,EAAKC,GAClB,OAAO,wBAAIC,IAAKD,GAAQD,UC3BpD,IAAMG,EAAwB,CAC5BC,gBAAgB,OAAD,OAAQC,IAAR,MAGXzB,EAAiB,CACrBwB,gBAAgB,OAAD,OAAQE,IAAR,MA0BFC,MAtBf,WAZEpB,SAASqB,MAAQ,UAYJ,MAEqBC,mBAAS/C,GAF9B,mBAENgD,EAFM,KAGb,OAHa,KAIX,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,mBAAmBI,MAAOsB,IAEzC,kBAAC,EAAD,CAASvB,eAAgBA,IACzB,yBAAKH,UAAU,YAEbiC,EAAUX,KAAI,SAACC,EAAKC,GAClB,IAAIJ,EAAaG,EAAKW,KAAKd,WACvBC,EAAaE,EAAKW,KAAKb,WAC3B,OACE,kBAAC,EAAD,CAASI,IAAKL,EAAYd,GAAE,cAASkB,GAASJ,WAAYA,EAAYC,WAAYA,SCjC1Ec,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDyHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61066f9e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/f68217cb8d16716e729b3fe2c8d2b425.161fa091.jpg\";","module.exports = __webpack_public_path__ + \"static/media/GettyImages-694542042-e1586274805503.7fb3e07f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const Screen2OBJ = [{'data': {\n    'upperTitle':'Data Diagnosis',\n    'lowerTitle':['Descriptive Analysis','Predictive Report','Prescriptive Dashboard','Paid Datasets','Proprietary Intelligence','Social Listening','Search Aggregation','Industry Experts White Paper Research']\n}},\n{'data': {\n    'upperTitle':'PSYCHOANALYSIS',\n    'lowerTitle':['Cognitive Biases','Behaviour Traits','Most Relevant Metric Stack','Digital Footprint','Professional Verification','Personal Verification','Interviews / Dialogues','Public Records Profiling']\n}}\n]\n\n\nexport default Screen2OBJ","import React,{useEffect} from 'react'\nimport {gsap,TweenMax} from 'gsap'\nimport ScrollTrigger from 'gsap/ScrollTrigger'\n\nconst ScreenTitle = ()=>{\n    useEffect(()=>{\n        gsap.registerPlugin(ScrollTrigger)\n        gsap.to('.screenTitle', {\n            scrollTrigger:{\n                trigger:'.screen2',\n                toggleActions:\"restart none none none\",\n                scrub:true\n            },\n            y:300,\n            duration:3,\n        })\n        gsap.to('.screen1', {\n            scrollTrigger:{\n                trigger:'.screen2',\n                toggleActions:\"restart none none none\",\n                scrub:true\n            },\n            backgroundSize:\"120%\",\n            autoRound:false,\n        })\n    })\n    return(\n        <div className=\"screenTitle\" >\n        <h1>Super Future Kids</h1>\n      </div>\n    )\n}\n\nexport default ScreenTitle","import React from 'react'\nimport ScreenTitle from './component/screenTitle.component'\n\n\nconst Screen1 = (props)=>{\n    const {firstScreenSec} = props\n    return(\n        <div className=\"screen1\" style={firstScreenSec}>\n        <ScreenTitle/>\n        </div>\n    )\n}\n\nexport default Screen1","import React from 'react'\nimport {gsap,TweenMax} from 'gsap'\nimport ScrollTrigger from 'gsap/ScrollTrigger'\nimport { useEffect } from 'react'\n\nconst scrollLeftDesc = ({id})=>{\n    gsap.registerPlugin(ScrollTrigger)\n    const tl = gsap.timeline()\n    const SectionElement = document.getElementById(id)\n    const LeftDesc = SectionElement.children[0]\n\n    tl.to(LeftDesc, {\n        scrollTrigger:{\n            trigger:SectionElement,\n            toggleActions:\"restart none none none\",\n            start:'20px 90%',\n            end:'20px 80%',\n            scrub:true,\n            markers:true\n        },\n        opacity:1,\n        left:\"0%\",\n        duration:3,\n    }).to(LeftDesc, {\n        scrollTrigger:{\n            trigger:SectionElement,\n            toggleActions:\"restart none none none\",\n            start:'20px 20%',\n            end:'20px 10%',\n            scrub:true,\n            markers:true\n        },\n        opacity:0,\n        left:\"-18%\",\n        duration:3,\n    })\n}\n\nconst Screen2 = (props)=>{\n    useEffect(()=>{\n        scrollLeftDesc(props)\n    })\n    const {upperTitle ,lowerTitle} = props\n        return(\n            <div className=\"screen2-section\" id={props.id} >\n                <div className=\"leftDesc\">\n                <h2>{upperTitle}</h2>\n                    <ul>\n                        {lowerTitle.map((item,index)=>{\n                            return <li key={index}>{item}</li>\n                        })}\n                    </ul>\n                </div>\n            </div>\n        );\n}\nexport default Screen2","import React,{useState} from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Screen2OBJ from './screen2OBJ'\n\n\n\n\n// image for first background\nimport FirstBG from './assets/images/f68217cb8d16716e729b3fe2c8d2b425.jpg'\n// first section or screen\nimport FirstSec from './assets/images/GettyImages-694542042-e1586274805503.jpg'\n// import screen 1\nimport Screen1 from './section/screen1/screen1.section'\n// import screen 2\nimport Screen2 from './section/screen2/screen2.section'\n\n\nfunction Title(){\n  document.title = 'SuperFK'\n}\n\nconst screenBackgroundStyle = {\n  backgroundImage:`url(${FirstBG})`,\n}\n\nconst firstScreenSec = {\n  backgroundImage:`url(${FirstSec})`,\n}\n\n\nfunction App() {\n  Title()\n  const [screenObj, setScreenObj] = useState(Screen2OBJ);\n  return (\n    <div className=\"App\">\n      <div className=\"screenBackground\" style={screenBackgroundStyle}>\n      </div>\n      <Screen1 firstScreenSec={firstScreenSec} />\n      <div className=\"screen2\"></div>\n      {\n        screenObj.map((item,index)=>{\n          var upperTitle = item.data.upperTitle\n          var lowerTitle = item.data.lowerTitle\n          return(\n            <Screen2 key={upperTitle} id={`desc${index}`} upperTitle={upperTitle} lowerTitle={lowerTitle}/>\n          )\n        })\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}